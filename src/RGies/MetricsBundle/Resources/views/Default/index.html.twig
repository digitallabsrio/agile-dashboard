{% extends "MetricsBundle::layout.html.twig" %}

{% block content %}
    {#== Copy Widget Dialog =====================================================================================#}
    {% set content %}
    <form id="copy-widget-form" method="post" action="{{ path('widgets_copy') }}" enctype="multipart/form-data">
        <div class="form-group">
            <label for="copy-widget-title">New title</label>
            <input id="copy-widget-title" name="title" type="text" class="form-control" required="required">
        </div>
        <div class="form-group">
            <label for="copy-target-dashboard">Target dashboard</label>
            <select id="copy-target-dashboard" name="dashboard" class="form-control">
                {% for item in dashboards %}
                <option value="{{ item.id }}"{% if (item.id == dashboard.id) %} selected="selected"{% endif %}>{{ item.title }}</option>
                {% endfor %}
            </select>
        </div>
        <input id="copy-widget-id" type="hidden" name="id" value="">
    </form>
    {% endset %}
    {% include 'MetricsBundle::Templates/modal.html.twig' with {'id': 'copy-widget-modal', 'title': 'Copy Widget', 'submit': 'Copy', 'content': content} only %}
    {# END dialog #}

    <button id="widget-new" title="Add new widget" class="btn btn-default" style="display: none; margin-bottom: 8px;" onclick="location.href='{{ path("recipe_library", {type:'widget'}) }}'"><i class="fa fa-plus"></i> Add widget</button>
    <script>
        var requestStack = [];
        function addDataRequest(url, params, callback) {
            requestStack.push({'url':url, 'params': params, 'callback': callback});
        }
    </script>

    {% if widgets|length %}
        <div id="sortable">
        {% for widget in widgets %}
            {% set config = widgetService.getWidgetConfig(widget.type, widget.id) %}
            {% if widget.enabled %}
            {% include widgetService.getWidgetIncludePath(widget.type) with {'widget': widget, 'config': config} %}
            {% endif %}
        {% endfor %}
        </div>
    {% else %}
        <div id="widget-0" class="panel panel-default widget-panel">
            <div class="panel-heading widget-panel-title" style="">&nbsp;</div>

            <div class="panel-body widget-panel-body">
                <p style="text-align: center">
                    <a href="{{ path("recipe_library", {type:'widget'}) }}">
                        <i class="fa fa-plus-circle fa-5x"></i>
                    </a>
                </p>
            </div>
        </div>
    {% endif %}

{% endblock %}

{% block js %}
    <link href="{{ asset('css/jquery-ui.min.css') }}" rel="stylesheet" media="screen">
    <script src="{{ asset('js/jquery-ui.min.js') }}"></script>

    <script>
        var dashboardEditMode = false;

        // Catch key events
        $( document ).keypress(function( event ) {
            //console.log(event.keyCode);

            if ( $('input:focus, textarea:focus').length === 0 ) {
                // create new widget <n>-key
                if (event.keyCode == 110) {
                    {%- if aclService.userHasUrlAccess(path('widgets_new', {'dashboardId': dashboard.id})) %}
                    location.href = '{{ path('widgets_new', {'dashboardId': dashboard.id}) }}';
                    {% endif -%}
                }
                // dashboard drag&drop edit  mode <e>-key
                else if (event.keyCode == 101) {
                    {% if aclService.userHasUrlAccess(path("widgets_reorder")) %}
                    toggleDashboardEditMode();
                    {% endif %}
                }
                // fullscreen mode
                else if (event.keyCode == 102) {
                    if (screenfull.enabled) {
                        screenfull.toggle();
                    }
                }
            }
        });

        /**
         * Activates or deactivates the dashboard edit mode.
         */
        {% if aclService.userHasUrlAccess(path("widgets_reorder")) %}
        function toggleDashboardEditMode()
        {
            // toggle plus items
            if (dashboardEditMode == false) {
                dashboardEditMode = true;
                {% if aclService.userHasUrlAccess(path('dashboard_new')) and not licenseService.limitReached('Dashboard') -%}
                $('#dashboard-new').css('display', 'inline-block');
                $('.badge-dashboard-edit').css('display', 'inline-block');
                {% endif -%}
                {% if aclService.userHasUrlAccess(path('widgets_new', {dashboardId: dashboard.id})) -%}
                if (!$('#widget-0').length) $('#widget-new').css('display', 'inline-block');
                {% endif -%}
                $('.widget-item').addClass('widget-panel-edit-mode');
                $('.dashboard-nav-item').addClass('widget-panel-edit-mode');
                $( "#sortable" ).sortable({
                    opacity: 0.5,
                    update: function(event, ui) {
                        var items = $(this).sortable('toArray', {attribute: 'data-id'}).toString();
                        $.post('{{ path('widgets_reorder') }}'
                                , {'widgets': items, 'dashboard_id': {{ dashboard.id }}}).done(function(data){});
                    }
                }).disableSelection();
                $( "#sortable" ).sortable('enable');

                $( "#dashboard-nav-items" ).sortable({
                    axis: "x",
                    update: function(event, ui) {
                        var items = $(this).sortable('toArray', {attribute: 'data-id'}).toString();
                        $.post('{{ path('dashboard_reorder') }}', {'id_list': items}).done(function(data){});
                    }
                }).disableSelection();
                $( "#dashboard-nav-items" ).sortable('enable');

                $( ".dashboard-nav-item" ).droppable({
                    accept: ".widget-item",
                    tolerance: "pointer",
                    hoverClass: "navbar-inverse",
                    drop: function( event, ui ) {
                        var widgetId = ui.draggable.data('id');
                        var dashboardId = $(this).attr('data-id');

                        $('#widget-' + widgetId).remove();
                        $.post('{{ path('widgets_set_dashboard') }}', {widgetId: widgetId, dashboardId: dashboardId} );
                    }
                });
                $( ".dashboard-nav-item" ).droppable('enable');

            } else {
                dashboardEditMode = false;
                $('#dashboard-new').css('display', 'none');
                $('#widget-new').css('display', 'none');
                $('.badge-dashboard-edit').css('display', 'none');
                $('.widget-item').removeClass('widget-panel-edit-mode');
                $('.dashboard-nav-item').removeClass('widget-panel-edit-mode');
                $( "#sortable" ).sortable('disable');
                $( ".dashboard-nav-item" ).droppable('disable');
                $( "#dashboard-nav-items" ).sortable('disable');
            }
        }
        {% endif %}

        /**
         * Dashboard init
         */
        $(document).ready(function() {
            dataRequestHandler.refreshWidgetData();

            // Main timer to reload widget data
            var updateTimer = window.setInterval(function(){
                dataRequestHandler.refreshWidgetData()}, {{ interval }} * 60000 );

            // Retry timer to reload widget data
            var retryTimer = window.setInterval(function(){
                dataRequestHandler.retryLoadData()}, 10000 );
        });

        /**
         * Handler for the widget data management.
         */
        var dataRequestHandler = {

            retryQueue: [],

            /**
             * Reloads data for all registered widgets.
             */
            refreshWidgetData: function ()
            {
                dataRequestHandler.retryQueue = [];

                for (var i = 0; i < requestStack.length; i++) {
                    var request = requestStack[i];

                    $.ajax({
                        type: "POST",
                        async: true,
                        url: request['url'],
                        data: request['params'],
                        context: request,
                        success: request['callback'],
                        error: function() {
                            dataRequestHandler.retryQueue.push($(this)[0]);
                        }
                    });
                }
            },

            /**
             * Retry to load data which are failed at first load
             */
            retryLoadData: function()
            {
                if (dataRequestHandler.retryQueue.length > 0) {
                    var request = dataRequestHandler.retryQueue.shift();
                    $.post(request['url'], request['params'], request['callback']);
                }
            }
        }

        /**
         * Disable widget and remove from dashboard.
         *
         * @param id
         */
        function disableWidget(id)
        {
            $('#widget-' + id).remove();
            $.post('{{ path('widgets_disable') }}', {id: id} );
        }

        /**
         * Copy widget.
         *
         * @param id
         * @param title
         */
        function copyWidget(id, title)
        {
            $('#copy-widget-title').val(title + ' - copy');
            $('#copy-widget-id').val(id);
            $('#copy-widget-modal').modal();
        }
    </script>
{% endblock %}
