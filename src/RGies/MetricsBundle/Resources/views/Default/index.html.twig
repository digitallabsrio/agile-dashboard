{% extends "MetricsBundle::layout.html.twig" %}

{% block content %}
    <button id="widget-new" title="Add new widget" class="btn btn-default" style="display: none; margin-bottom: 8px;" onclick="location.href='{{ path('widgets_new') }}'"><i class="fa fa-plus"></i> Add widget</button>
    <script>
        var requestStack = [];
        function addDataRequest(url, params, callback) {
            requestStack.push({'url':url, 'params': params, 'callback': callback});
        }
    </script>

    {% if widgets|length %}
        <div id="sortable">
        {% for widget in widgets %}
            {% if widget.enabled %}
            {% include widgetService.getWidgetIncludePath(widget.type) with {'widget': widget} %}
            {% endif %}
        {% endfor %}
        </div>
    {% else %}
        <div id="widget-0" class="panel panel-default widget-panel">
            <div class="panel-heading widget-panel-title" style="">&nbsp;</div>

            <div class="panel-body widget-panel-body">
                <center><a href="{{ path('widgets_new') }}"><i class="fa fa-plus-circle fa-5x"></i></a></center>
            </div>
        </div>
    {% endif %}

{% endblock %}

{% block js %}
    <link href="{{ asset('css/jquery-ui.min.css') }}" rel="stylesheet" media="screen">
    <script src="{{ asset('js/jquery-ui.min.js') }}"></script>

    <script>
        var dashboardEditMode = false;

        // Catch key events
        $( document ).keypress(function( event ) {

            if ( $('input:focus, textarea:focus').length === 0 ) {
                // create new task <n>-key
                if (event.keyCode == 110) {
                    location.href = '{{ path('widgets_new') }}';
                }
                // edit tasklist <e>-key
                else if (event.keyCode == 101) {
                    // toggle plus items
                    if (dashboardEditMode == false) {
                        dashboardEditMode = true;
                        $('#dashboard-new').css('display', 'inline-block');
                        $('#widget-new').css('display', 'inline-block');
                    } else {
                        dashboardEditMode = false;
                        $('#dashboard-new').css('display', 'none');
                        $('#widget-new').css('display', 'none');
                    }
                }
            }
        });

        $(document).ready(function() {
            dataRequestHandler.refreshWidgetData();

            // Main timer to reload widget data
            var updateTimer = window.setInterval(function(){
                dataRequestHandler.refreshWidgetData()}, {{ interval }} * 60000 );

            // Retry timer to reload widget data
            var retryTimer = window.setInterval(function(){
                dataRequestHandler.retryLoadData()}, 10000 );

            $(document).ready(function()
            {
                $( "#sortable" ).sortable(
                    {
                        update: function(event, ui) {
                            var items = $(this).sortable('toArray', {attribute: 'data-id'}).toString();
                            $.post('{{ path('widgets_reorder') }}'
                                    , {'widgets': items, 'dashboard_id': {{ dashboard.id }}}).done(function(data){});
                        }
                    });
                $( "#sortable" ).disableSelection();

            });
        });

        var dataRequestHandler = {

            retryQueue: [],

            /**
             * Reloads data for all registered widgets.
             */
            refreshWidgetData: function ()
            {
                for (var i = 0; i < requestStack.length; i++) {
                    var request = requestStack[i];

                    $.ajax({
                        type: "POST",
                        url: request['url'],
                        data: request['params'],
                        context: request,
                        success: request['callback'],
                        error: function() {
                            dataRequestHandler.retryQueue.push($(this)[0]);
                        }
                    });
                }
            },

            /**
             * Retry to load data which are failed at first load
             */
            retryLoadData: function()
            {
                if (dataRequestHandler.retryQueue.length > 0) {
                    var request = dataRequestHandler.retryQueue.shift();
                    //console.log('Retry:' + request['url']);
                    $.post(request['url'], request['params'], request['callback']);
                }
            }
        }

        function disableWidget(id)
        {
            $('#widget-' + id).remove();
            $.post('{{ path('widgets_disable') }}', {id: id} );
        }
    </script>
{% endblock %}
